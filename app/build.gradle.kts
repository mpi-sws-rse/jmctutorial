/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenLocal()
    mavenCentral()
}

val agentDependencies by configurations.creating

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    agentDependencies("org.mpisws:jmc:0.1.0")
    agentDependencies("org.mpisws:jmc-agent:0.1.0")

    // JMC for model checking
    testImplementation("org.mpisws:jmc:0.1.0")
    // This dependency is used by the application.
    implementation(libs.guava)
}

tasks.register<Copy>("copyJar") {
    from(agentDependencies.filter { it.name.contains("jmc-0.1.0") })
    into("src/main/resources/lib")
}

tasks.processResources {
    dependsOn("copyJar")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.example.App"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    val agentJar = agentDependencies.find { it.name.contains("jmc-agent-0.1.0") }?.absolutePath

    val agentArg = "-javaagent:$agentJar=debug,instrumentingPackages=org.example"
    jvmArgs(agentArg)
}
